"use strict";var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");_Object$defineProperty(exports, "__esModule", { value: true });exports.aggregator = void 0;var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));var _map2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));var _values = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/values"));var _cache = require("../../../utils/cache");
var _errors = require("../../../utils/errors");
var _metrics = require("../../../utils/metrics");
var _circuitBreaker = require("../../../utils/circuitBreaker");









class AnalyticsAggregator {



  constructor() {this.cache = void 0;this.circuitBreaker = void 0;
    this.cache = new _cache.Cache({
      ttl: 3600, // 1 hour
      prefix: 'aggregation:'
    });

    this.circuitBreaker = new _circuitBreaker.CircuitBreaker({
      failureThreshold: 3,
      resetTimeout: 30000 // 30 seconds
    });
  }

  async aggregateData(job) {
    const start = process.hrtime();

    try {
      // Try to get from cache first
      const cacheKey = this.getCacheKey(job);
      const cachedResult = await this.cache.get(cacheKey);

      if (cachedResult) {
        _metrics.analyticsMetrics.trackCache('aggregation', true);
        return cachedResult;
      }

      _metrics.analyticsMetrics.trackCache('aggregation', false);

      // Execute aggregation with circuit breaker
      const result = await this.circuitBreaker.execute(
        'aggregation',
        () => this.executeAggregation(job)
      );

      // Cache the result
      await this.cache.set(cacheKey, result);

      // Track metrics
      const duration = process.hrtime(start);
      _metrics.analyticsMetrics.trackEvent(
        'aggregation',
        duration[0] + duration[1] / 1e9
      );

      return result;
    } catch (error) {
      _errors.logger.error('Aggregation failed:', {
        error,
        job
      });
      throw error;
    }
  }

  async executeAggregation(job) {
    const pipeline = this.buildAggregationPipeline(job);

    // Execute pipeline in chunks if needed
    if (this.shouldProcessInChunks(job)) {
      return this.executeChunkedAggregation(job, pipeline);
    }

    return this.executeSingleAggregation(pipeline);
  }

  buildAggregationPipeline(job) {var _context;
    const pipeline = [
    {
      $match: {
        timestamp: {
          $gte: job.startDate,
          $lte: job.endDate
        }
      }
    }];


    if (job.userId) {
      pipeline[0].$match.userId = job.userId;
    }

    // Add group stage based on dimensions
    const groupStage = {
      $group: {
        _id: {}
      }
    };

    (0, _forEach.default)(_context = job.dimensions).call(_context, (dim) => {
      groupStage.$group._id[dim] = `$${dim}`;
    });

    // Add metrics
    groupStage.$group.count = { $sum: 1 };
    groupStage.$group.totalAmount = { $sum: '$amount' };
    groupStage.$group.avgAmount = { $avg: '$amount' };

    pipeline.push(groupStage);

    return pipeline;
  }

  async executeChunkedAggregation(
  job,
  pipeline)
  {
    const chunkSize = 24 * 60 * 60 * 1000; // 1 day in milliseconds
    const results = [];

    let currentStart = job.startDate;
    while (currentStart < job.endDate) {
      const chunkEnd = new Date(Math.min(
        currentStart.getTime() + chunkSize,
        job.endDate.getTime()
      ));

      const chunkPipeline = [
      {
        $match: {
          ...pipeline[0].$match,
          timestamp: {
            $gte: currentStart,
            $lt: chunkEnd
          }
        }
      },
      ...(0, _slice.default)(pipeline).call(pipeline, 1)];


      const chunkResult = await this.executeSingleAggregation(chunkPipeline);
      results.push(...chunkResult);

      currentStart = chunkEnd;
    }

    return this.mergeChunkedResults(results, job.dimensions);
  }

  async executeSingleAggregation(pipeline) {
    // This would be implemented with your actual MongoDB client
    // For now, we'll just log the pipeline
    _errors.logger.info('Executing aggregation pipeline:', pipeline);
    return [];
  }

  shouldProcessInChunks(job) {
    const timeRange = job.endDate.getTime() - job.startDate.getTime();
    const dayInMs = 24 * 60 * 60 * 1000;
    return timeRange > dayInMs * 7; // Chunk if range > 7 days
  }

  mergeChunkedResults(results, dimensions) {var _context2;
    const merged = new _map.default();

    (0, _forEach.default)(results).call(results, (result) => {
      const key = (0, _map2.default)(dimensions).call(dimensions, (dim) => result._id[dim]).join(':');

      if (!merged.has(key)) {
        merged.set(key, {
          _id: result._id,
          count: 0,
          totalAmount: 0,
          totalCount: 0
        });
      }

      const current = merged.get(key);
      current.count += result.count;
      current.totalAmount += result.totalAmount;
      current.totalCount += result.count;
    });

    return (0, _map2.default)(_context2 = (0, _from.default)((0, _values.default)(merged).call(merged))).call(_context2, (result) => ({
      ...result,
      avgAmount: result.totalAmount / result.totalCount
    }));
  }

  getCacheKey(job) {
    return `${job.type}:${job.userId || 'all'}:${job.startDate.toISOString()}:${job.endDate.toISOString()}:${job.dimensions.join(',')}`;
  }
}

const aggregator = exports.aggregator = new AnalyticsAggregator();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,