"use strict";var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");_Object$defineProperty(exports, "__esModule", { value: true });exports.errorMessages = exports.analyticsSchemas = void 0;var _joi = _interopRequireDefault(require("joi"));

/**
 * Common schema components
 */
const commonSchemas = {
  userId: _joi.default.string().required().min(1).max(64),
  timestamp: _joi.default.date().iso().required(),
  eventName: _joi.default.string().required().min(1).max(100),
  metadata: _joi.default.object().max(10 * 1024) // 10kb limit for metadata
};

/**
 * Analytics validation schemas
 */
const analyticsSchemas = exports.analyticsSchemas = {
  // Single event tracking schema
  trackEvent: {
    body: _joi.default.object({
      userId: commonSchemas.userId,
      timestamp: commonSchemas.timestamp,
      eventName: commonSchemas.eventName,
      metadata: commonSchemas.metadata,
      deviceInfo: _joi.default.object({
        platform: _joi.default.string().valid('ios', 'android', 'web').required(),
        version: _joi.default.string().required(),
        model: _joi.default.string().allow(''),
        osVersion: _joi.default.string().allow('')
      }).required()
    })
  },

  // Batch events schema
  batchEvents: {
    body: _joi.default.object({
      events: _joi.default.array().items(_joi.default.object({
        userId: commonSchemas.userId,
        timestamp: commonSchemas.timestamp,
        eventName: commonSchemas.eventName,
        metadata: commonSchemas.metadata,
        deviceInfo: _joi.default.object({
          platform: _joi.default.string().valid('ios', 'android', 'web').required(),
          version: _joi.default.string().required(),
          model: _joi.default.string().allow(''),
          osVersion: _joi.default.string().allow('')
        }).required()
      })).min(1).max(100).required() // Maximum 100 events per batch
    })
  },

  // Analytics query schema
  queryAnalytics: {
    query: _joi.default.object({
      startDate: _joi.default.date().iso().required(),
      endDate: _joi.default.date().iso().required(),
      userId: _joi.default.string().min(1).max(64),
      eventName: _joi.default.string().min(1).max(100),
      platform: _joi.default.string().valid('ios', 'android', 'web'),
      limit: _joi.default.number().integer().min(1).max(1000).default(100),
      offset: _joi.default.number().integer().min(0).default(0),
      sort: _joi.default.string().valid('asc', 'desc').default('desc')
    }).custom((value, helpers) => {
      // Validate date range
      if (value.startDate && value.endDate) {
        const start = new Date(value.startDate);
        const end = new Date(value.endDate);
        const maxRange = 30 * 24 * 60 * 60 * 1000; // 30 days in milliseconds

        if (end < start) {
          return helpers.error('date.invalid');
        }

        if (end.getTime() - start.getTime() > maxRange) {
          return helpers.error('date.range.max');
        }
      }
      return value;
    })
  }
};

// Custom error messages
const errorMessages = exports.errorMessages = {
  'date.invalid': 'End date must be greater than start date',
  'date.range.max': 'Date range cannot exceed 30 days',
  'array.max': 'Batch size cannot exceed 100 events',
  'object.max': 'Metadata size exceeds maximum allowed size',
  'string.max': 'Field exceeds maximum allowed length'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,