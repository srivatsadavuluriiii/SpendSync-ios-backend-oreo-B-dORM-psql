"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));var _supertest = _interopRequireDefault(require("supertest"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _index = _interopRequireDefault(require("../src/index.js"));
var _AnalyticsEvent = _interopRequireDefault(require("../src/models/AnalyticsEvent.js"));

describe('Budget Endpoints', () => {
  beforeEach(async () => {
    await _AnalyticsEvent.default.deleteMany({});
  });

  describe('GET /budget/analysis', () => {
    it('should return 401 without user ID', async () => {
      const response = await (0, _supertest.default)(_index.default).
      get('/budget/analysis').
      expect(401);

      expect(response.body.error).toBe('User ID is required');
    });

    it('should analyze monthly budget status', async () => {
      // Create test data
      const userId = new _mongoose.default.Types.ObjectId();
      const budgetEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'BUDGET_UPDATED',
        category: 'groceries',
        amount: 500,
        metadata: new _map.default([['period', 'monthly']])
      });
      await budgetEvent.save();

      const transactionEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'EXPENSE_CREATED',
        category: 'groceries',
        amount: 300,
        timestamp: new Date()
      });
      await transactionEvent.save();

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/analysis').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('analysis');
      expect(response.body.analysis).toHaveProperty('groceries');
      expect(response.body.analysis.groceries).toHaveProperty('status');
      expect(response.body.analysis.groceries).toHaveProperty('percentage');
    });

    it('should handle different time periods', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const budgetEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'BUDGET_UPDATED',
        category: 'groceries',
        amount: 500,
        metadata: new _map.default([['period', 'monthly']])
      });
      await budgetEvent.save();

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/analysis').
      query({
        userId: userId.toString(),
        period: 'weekly'
      }).
      expect(200);

      expect(response.body).toHaveProperty('analysis');
    });

    it('should generate budget recommendations', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const budgetEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'BUDGET_UPDATED',
        category: 'groceries',
        amount: 500,
        metadata: new _map.default([['period', 'monthly']])
      });
      await budgetEvent.save();

      const transactionEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'EXPENSE_CREATED',
        category: 'groceries',
        amount: 600,
        timestamp: new Date()
      });
      await transactionEvent.save();

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/analysis').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('recommendations');
      expect((0, _isArray.default)(response.body.recommendations)).toBe(true);
    });
  });

  describe('GET /budget/comparison', () => {
    it('should compare budget vs actual spending', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const budgetEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'BUDGET_UPDATED',
        category: 'groceries',
        amount: 500,
        metadata: new _map.default([['period', 'monthly']])
      });
      await budgetEvent.save();

      const transactionEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'EXPENSE_CREATED',
        category: 'groceries',
        amount: 300,
        timestamp: new Date()
      });
      await transactionEvent.save();

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/comparison').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('comparison');
      expect(response.body.comparison).toHaveProperty('groceries');
      expect(response.body.comparison.groceries).toHaveProperty('budgeted');
      expect(response.body.comparison.groceries).toHaveProperty('actual');
    });

    it('should calculate correct differences and percentages', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const budgetEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'BUDGET_UPDATED',
        category: 'groceries',
        amount: 500,
        metadata: new _map.default([['period', 'monthly']])
      });
      await budgetEvent.save();

      const transactionEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'EXPENSE_CREATED',
        category: 'groceries',
        amount: 300,
        timestamp: new Date()
      });
      await transactionEvent.save();

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/comparison').
      query({ userId: userId.toString() }).
      expect(200);

      const comparison = response.body.comparison.groceries;
      expect(comparison.difference).toBe(200);
      expect(comparison.percentage).toBe(60);
    });

    it('should handle categories without budget targets', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactionEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'EXPENSE_CREATED',
        category: 'groceries',
        amount: 300,
        timestamp: new Date()
      });
      await transactionEvent.save();

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/comparison').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body.comparison.groceries).toHaveProperty('budgeted', 0);
    });
  });

  describe('Budget Analysis Quality', () => {
    it('should provide meaningful analysis for complex spending patterns', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const budgetEvent = new _AnalyticsEvent.default({
        userId,
        eventType: 'BUDGET_UPDATED',
        category: 'groceries',
        amount: 500,
        metadata: new _map.default([['period', 'monthly']])
      });
      await budgetEvent.save();

      // Create multiple transactions with varying amounts
      const transactions = [
      { amount: 100, timestamp: new Date() },
      { amount: 150, timestamp: new Date() },
      { amount: 200, timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          category: 'groceries',
          amount: t.amount,
          timestamp: t.timestamp
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/budget/analysis').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body.analysis.groceries).toHaveProperty('trend');
      expect(response.body.analysis.groceries).toHaveProperty('insights');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,