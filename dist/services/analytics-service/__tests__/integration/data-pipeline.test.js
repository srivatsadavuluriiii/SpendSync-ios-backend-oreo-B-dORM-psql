"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));var _mongoose = _interopRequireDefault(require("mongoose"));
var _setup = require("../setup.js");
var _AnalyticsEvent = _interopRequireDefault(require("../../src/models/AnalyticsEvent.js"));
var _SpendingReport = _interopRequireDefault(require("../../src/models/SpendingReport.js"));

describe('Data Processing Pipeline Integration Tests', () => {
  beforeAll(async () => {
    await (0, _setup.setupTestDB)();
  });

  afterAll(async () => {
    await (0, _setup.teardownTestDB)();
  });

  beforeEach(async () => {
    await _AnalyticsEvent.default.deleteMany({});
    await _SpendingReport.default.deleteMany({});
  });

  describe('Data Ingestion Pipeline', () => {
    test('should successfully ingest and process batch expense data', async () => {
      const testExpenses = (0, _setup.generateTestExpenses)(100);

      // Batch insert expenses
      await _AnalyticsEvent.default.insertMany(testExpenses);

      // Verify data was properly stored
      const storedExpenses = await (0, _find.default)(_AnalyticsEvent.default).call(_AnalyticsEvent.default, {});
      expect(storedExpenses).toHaveLength(100);

      // Verify data integrity
      const randomExpense = testExpenses[0];
      const storedExpense = await _AnalyticsEvent.default.findOne({
        userId: randomExpense.userId,
        timestamp: randomExpense.timestamp
      });

      expect(storedExpense).toBeDefined();
      expect(storedExpense.amount).toBe(randomExpense.amount);
      expect(storedExpense.category).toBe(randomExpense.category);
    });

    test('should handle duplicate expense entries correctly', async () => {
      const testExpense = (0, _setup.generateTestExpenses)(1)[0];

      // Try to insert the same expense twice
      await _AnalyticsEvent.default.create(testExpense);
      await expect(_AnalyticsEvent.default.create(testExpense)).rejects.toThrow();

      // Verify only one record exists
      const count = await _AnalyticsEvent.default.countDocuments({
        userId: testExpense.userId,
        timestamp: testExpense.timestamp
      });
      expect(count).toBe(1);
    });
  });

  describe('Data Aggregation Pipeline', () => {
    test('should generate accurate daily spending reports', async () => {
      const testExpenses = (0, _setup.generateTestExpenses)(50);
      await _AnalyticsEvent.default.insertMany(testExpenses);

      // Group expenses by date
      const pipeline = [
      {
        $group: {
          _id: {
            date: { $dateToString: { format: '%Y-%m-%d', date: '$timestamp' } },
            category: '$category'
          },
          totalAmount: { $sum: '$amount' },
          count: { $sum: 1 }
        }
      }];


      const dailyReport = await _AnalyticsEvent.default.aggregate(pipeline);
      expect(dailyReport.length).toBeGreaterThan(0);

      // Verify report structure
      const sampleReport = dailyReport[0];
      expect(sampleReport._id).toHaveProperty('date');
      expect(sampleReport._id).toHaveProperty('category');
      expect(sampleReport).toHaveProperty('totalAmount');
      expect(sampleReport).toHaveProperty('count');
    });

    test('should calculate correct monthly category totals', async () => {
      const testExpenses = (0, _setup.generateTestExpenses)(100);
      await _AnalyticsEvent.default.insertMany(testExpenses);

      const pipeline = [
      {
        $group: {
          _id: {
            month: { $month: '$timestamp' },
            category: '$category'
          },
          totalAmount: { $sum: '$amount' }
        }
      }];


      const monthlyTotals = await _AnalyticsEvent.default.aggregate(pipeline);

      // Verify totals
      (0, _forEach.default)(monthlyTotals).call(monthlyTotals, (total) => {
        expect(total.totalAmount).toBeGreaterThan(0);
        expect(total._id.month).toBeLessThanOrEqual(12);
        expect(total._id.month).toBeGreaterThanOrEqual(1);
      });
    });
  });

  describe('Report Generation Pipeline', () => {
    test('should generate and store spending reports', async () => {
      const testExpenses = (0, _setup.generateTestExpenses)(100);
      await _AnalyticsEvent.default.insertMany(testExpenses);

      // Generate report
      const reportData = {
        userId: testExpenses[0].userId,
        period: 'monthly',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-01-31'),
        totalSpending: (0, _reduce.default)(testExpenses).call(testExpenses, (sum, exp) => sum + exp.amount, 0),
        categoryBreakdown: {},
        timestamp: new Date()
      };

      const report = await _SpendingReport.default.create(reportData);

      // Verify report was stored
      expect(report._id).toBeDefined();
      expect(report.userId).toBe(reportData.userId);
      expect(report.totalSpending).toBe(reportData.totalSpending);
    });

    test('should update existing reports with new data', async () => {
      const testExpenses = (0, _setup.generateTestExpenses)(50);
      await _AnalyticsEvent.default.insertMany(testExpenses);

      // Create initial report
      const initialReport = await _SpendingReport.default.create({
        userId: testExpenses[0].userId,
        period: 'monthly',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-01-31'),
        totalSpending: 1000,
        categoryBreakdown: {},
        timestamp: new Date()
      });

      // Update report
      const updatedTotal = 1500;
      await _SpendingReport.default.findByIdAndUpdate(
        initialReport._id,
        { totalSpending: updatedTotal },
        { new: true }
      );

      // Verify update
      const report = await _SpendingReport.default.findById(initialReport._id);
      expect(report.totalSpending).toBe(updatedTotal);
    });
  });

  describe('Error Handling', () => {
    test('should handle invalid data gracefully', async () => {
      const invalidExpense = {
        userId: 'test-user',
        amount: 'invalid-amount', // Should be a number
        timestamp: new Date(),
        category: 'food'
      };

      await expect(_AnalyticsEvent.default.create(invalidExpense)).rejects.toThrow();
    });

    test('should handle missing required fields', async () => {
      const incompleteExpense = {
        userId: 'test-user',
        // Missing amount and category
        timestamp: new Date()
      };

      await expect(_AnalyticsEvent.default.create(incompleteExpense)).rejects.toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,