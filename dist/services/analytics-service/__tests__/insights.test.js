"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/some"));var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _fill = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/fill"));var _supertest = _interopRequireDefault(require("supertest"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _index = _interopRequireDefault(require("../src/index.js"));
var _AnalyticsEvent = _interopRequireDefault(require("../src/models/AnalyticsEvent.js"));

describe('Insights Endpoints', () => {
  beforeEach(async () => {
    await _AnalyticsEvent.default.deleteMany({});
  });

  describe('GET /insights', () => {
    it('should return 401 without user ID', async () => {
      const response = await (0, _supertest.default)(_index.default).
      get('/insights').
      expect(401);

      expect(response.body.error).toBe('User ID is required');
    });

    it('should generate insights from spending patterns', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() },
      { amount: 200, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/insights').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('insights');
      expect((0, _isArray.default)(response.body.insights)).toBe(true);
    });

    it('should identify significant spending changes', async () => {var _context;
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 300, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/insights').
      query({ userId: userId.toString() }).
      expect(200);

      expect((0, _some.default)(_context = response.body.insights).call(_context, (insight) =>
      insight.type === 'SPENDING_CHANGE'
      )).toBe(true);
    });

    it('should handle empty data gracefully', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const response = await (0, _supertest.default)(_index.default).
      get('/insights').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body.insights).toEqual([]);
    });
  });

  describe('GET /insights/recommendations', () => {
    it('should return spending recommendations', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/insights/recommendations').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('recommendations');
      expect((0, _isArray.default)(response.body.recommendations)).toBe(true);
    });

    it('should identify high-frequency spending categories', async () => {var _context2, _context3, _context4;
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = (0, _map.default)(_context2 = (0, _fill.default)(_context3 = Array(5)).call(_context3, null)).call(_context2, () => ({
        amount: 50,
        category: 'groceries',
        timestamp: new Date()
      }));

      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/insights/recommendations').
      query({ userId: userId.toString() }).
      expect(200);

      expect((0, _some.default)(_context4 = response.body.recommendations).call(_context4, (rec) =>
      rec.type === 'HIGH_FREQUENCY'
      )).toBe(true);
    });

    it('should identify irregular large expenses', async () => {var _context5;
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 1000, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/insights/recommendations').
      query({ userId: userId.toString() }).
      expect(200);

      expect((0, _some.default)(_context5 = response.body.recommendations).call(_context5, (rec) =>
      rec.type === 'LARGE_EXPENSE'
      )).toBe(true);
    });
  });

  describe('Data Analysis Quality', () => {
    it('should provide meaningful insights for varied spending patterns', async () => {var _context6;
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 200, category: 'groceries', timestamp: new Date() },
      { amount: 300, category: 'groceries', timestamp: new Date() },
      { amount: 50, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/insights').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body.insights.length).toBeGreaterThan(0);
      expect((0, _some.default)(_context6 = response.body.insights).call(_context6, (insight) =>
      insight.type === 'TREND'
      )).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,