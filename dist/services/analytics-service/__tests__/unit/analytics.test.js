"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _sort = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/sort"));var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));var _mlRegressionSimpleLinear = require("ml-regression-simple-linear");
var _setup = require("../setup.js");
var _AnalyticsEvent = _interopRequireDefault(require("../../src/models/AnalyticsEvent.js"));
var _SpendingReport = _interopRequireDefault(require("../../src/models/SpendingReport.js"));

describe('Analytics Algorithms Unit Tests', () => {
  describe('Spending Pattern Analysis', () => {
    const testData = (0, _setup.generateTestExpenses)(100);

    test('should calculate correct spending by category', () => {var _context;
      const categoryTotals = {};
      (0, _forEach.default)(testData).call(testData, (expense) => {
        categoryTotals[expense.category] = (categoryTotals[expense.category] || 0) + expense.amount;
      });

      (0, _forEach.default)(_context = (0, _entries.default)(categoryTotals)).call(_context, ([category, total]) => {
        expect(total).toBeGreaterThan(0);
        expect(typeof total).toBe('number');
      });
    });

    test('should identify top spending categories', () => {var _context2, _context3;
      const categoryTotals = {};
      (0, _forEach.default)(testData).call(testData, (expense) => {
        categoryTotals[expense.category] = (categoryTotals[expense.category] || 0) + expense.amount;
      });

      const sortedCategories = (0, _map.default)(_context2 = (0, _sort.default)(_context3 = (0, _entries.default)(categoryTotals)).call(_context3,
      ([, a], [, b]) => b - a)).call(_context2,
      ([category]) => category);

      expect(sortedCategories.length).toBeGreaterThan(0);
      expect(sortedCategories[0]).toBeDefined();
    });
  });

  describe('Trend Analysis', () => {
    test('should calculate month-over-month changes correctly', () => {
      const monthlyData = [1000, 1200, 900, 1500];
      const momChanges = (0, _map.default)(monthlyData).call(monthlyData, (amount, i) => {
        if (i === 0) return 0;
        return (amount - monthlyData[i - 1]) / monthlyData[i - 1] * 100;
      });

      expect(momChanges[1]).toBe(20); // (1200 - 1000) / 1000 * 100
      expect(momChanges[2]).toBe(-25); // (900 - 1200) / 1200 * 100
      expect(momChanges[3]).toBe(66.67); // (1500 - 900) / 900 * 100
    });

    test('should detect significant spending changes', () => {
      const monthlyData = [1000, 2000, 1800, 3000];
      const significantChangeThreshold = 50;

      const changes = (0, _map.default)(monthlyData).call(monthlyData, (amount, i) => {
        if (i === 0) return 0;
        return (amount - monthlyData[i - 1]) / monthlyData[i - 1] * 100;
      });

      const significantChanges = (0, _filter.default)(changes).call(changes, (change) => Math.abs(change) > significantChangeThreshold);
      expect(significantChanges.length).toBeGreaterThan(0);
    });
  });

  describe('Prediction Algorithms', () => {
    test('should predict future spending using linear regression', () => {
      const monthlyData = [1000, 1100, 1250, 1400];
      const months = [0, 1, 2, 3];

      const regression = new _mlRegressionSimpleLinear.SimpleLinearRegression(months, monthlyData);
      const prediction = regression.predict(4);

      expect(prediction).toBeGreaterThan(monthlyData[monthlyData.length - 1]);
      expect(typeof prediction).toBe('number');
    });

    test('should calculate prediction confidence score', () => {
      const monthlyData = [1000, 1100, 1250, 1400];
      const months = [0, 1, 2, 3];

      const regression = new _mlRegressionSimpleLinear.SimpleLinearRegression(months, monthlyData);
      const r2Score = regression.score(months, monthlyData);

      expect(r2Score).toBeGreaterThanOrEqual(0);
      expect(r2Score).toBeLessThanOrEqual(1);
    });
  });

  describe('Budget Analysis', () => {
    test('should calculate budget variance correctly', () => {
      const budget = 1000;
      const actualSpending = 1200;
      const variance = (actualSpending - budget) / budget * 100;

      expect(variance).toBe(20);
    });

    test('should identify over-budget categories', () => {var _context4, _context5;
      const budgets = {
        food: 500,
        transport: 300,
        entertainment: 200
      };

      const spending = {
        food: 600,
        transport: 250,
        entertainment: 300
      };

      const overBudgetCategories = (0, _map.default)(_context4 = (0, _filter.default)(_context5 = (0, _entries.default)(spending)).call(_context5,
      ([category, amount]) => amount > budgets[category])).call(_context4,
      ([category]) => category);

      expect(overBudgetCategories).toContain('food');
      expect(overBudgetCategories).toContain('entertainment');
      expect(overBudgetCategories).not.toContain('transport');
    });
  });

  describe('Data Aggregation', () => {
    test('should aggregate daily spending correctly', () => {
      const expenses = [
      { amount: 100, timestamp: new Date('2024-01-01') },
      { amount: 200, timestamp: new Date('2024-01-01') },
      { amount: 150, timestamp: new Date('2024-01-02') }];


      const dailyTotals = {};
      (0, _forEach.default)(expenses).call(expenses, (expense) => {
        const date = expense.timestamp.toISOString().split('T')[0];
        dailyTotals[date] = (dailyTotals[date] || 0) + expense.amount;
      });

      expect(dailyTotals['2024-01-01']).toBe(300);
      expect(dailyTotals['2024-01-02']).toBe(150);
    });

    test('should calculate moving averages', () => {
      const dailySpending = [100, 200, 150, 300, 250];
      const windowSize = 3;
      const movingAverages = [];

      for (let i = 0; i <= dailySpending.length - windowSize; i++) {
        const window = (0, _slice.default)(dailySpending).call(dailySpending, i, i + windowSize);
        const average = (0, _reduce.default)(window).call(window, (a, b) => a + b, 0) / windowSize;
        movingAverages.push(average);
      }

      expect(movingAverages[0]).toBe(150); // (100 + 200 + 150) / 3
      expect(movingAverages[1]).toBe(216.67); // (200 + 150 + 300) / 3
      expect(movingAverages[2]).toBe(233.33); // (150 + 300 + 250) / 3
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,