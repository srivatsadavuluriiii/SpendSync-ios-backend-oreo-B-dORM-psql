"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));var _globals = require("@jest/globals");
var _dataProcessor = require("../../src/utils/dataProcessor.js");




var _cache = require("../../src/utils/cache.js");
var _metrics = require("../../src/utils/metrics.js");

// Mock dependencies
_globals.jest.mock('../../src/utils/cache.js');
_globals.jest.mock('../../src/utils/metrics.js');

describe('Data Processor Utilities', () => {
  beforeEach(() => {
    _globals.jest.clearAllMocks();
  });

  describe('processInChunks', () => {
    it('should process data in chunks with progress tracking', async () => {
      const testData = (0, _from.default)({ length: 2500 }, (_, i) => ({ id: i }));
      const mockProcessor = _globals.jest.fn((chunk) => (0, _map.default)(chunk).call(chunk, (item) => ({ ...item, processed: true })));
      const mockProgressCallback = _globals.jest.fn();

      const results = await (0, _dataProcessor.processInChunks)(testData, mockProcessor, {
        chunkSize: 1000,
        maxConcurrent: 2,
        progressCallback: mockProgressCallback
      });

      expect(results).toHaveLength(2500);
      expect(mockProcessor).toHaveBeenCalledTimes(3); // 2500/1000 = 3 chunks
      expect(mockProgressCallback).toHaveBeenCalledTimes(3);
      expect(_metrics.recordDataProcessingMetrics).toHaveBeenCalledTimes(2); // 2 batch operations

      // Verify progress reporting
      const lastProgress = mockProgressCallback.mock.calls[2][0];
      expect(lastProgress).toEqual({
        processed: 2500,
        total: 2500,
        percent: 100
      });
    });

    it('should handle processor errors', async () => {
      const testData = (0, _from.default)({ length: 100 }, (_, i) => ({ id: i }));
      const mockProcessor = _globals.jest.fn().mockRejectedValue(new Error('Processing error'));

      await expect((0, _dataProcessor.processInChunks)(testData, mockProcessor)).rejects.toThrow('Processing error');
    });
  });

  describe('aggregateWithCache', () => {
    it('should return cached result when available', async () => {
      const cachedResult = { data: 'cached' };
      _cache.redisClient.get.mockResolvedValue((0, _stringify.default)(cachedResult));

      const result = await (0, _dataProcessor.aggregateWithCache)(
        'test:key',
        async () => ({ data: 'fresh' })
      );

      expect(result).toEqual(cachedResult);
      expect(_cache.redisClient.get).toHaveBeenCalledWith('test:key');
      expect(_metrics.measureOperation).not.toHaveBeenCalled();
    });

    it('should execute and cache aggregation when no cache exists', async () => {
      const freshResult = { data: 'fresh' };
      _cache.redisClient.get.mockResolvedValue(null);
      _metrics.measureOperation.mockImplementation((_, fn) => fn());

      const mockAggregator = _globals.jest.fn().mockResolvedValue(freshResult);
      const result = await (0, _dataProcessor.aggregateWithCache)('test:key', mockAggregator);

      expect(result).toEqual(freshResult);
      expect(_cache.redisClient.get).toHaveBeenCalledWith('test:key');
      expect(_cache.redisClient.setex).toHaveBeenCalledWith(
        'test:key',
        3600,
        (0, _stringify.default)(freshResult)
      );
      expect(mockAggregator).toHaveBeenCalled();
    });

    it('should force fresh aggregation when specified', async () => {
      const freshResult = { data: 'fresh' };
      _metrics.measureOperation.mockImplementation((_, fn) => fn());

      const mockAggregator = _globals.jest.fn().mockResolvedValue(freshResult);
      const result = await (0, _dataProcessor.aggregateWithCache)(
        'test:key',
        mockAggregator,
        { forceFresh: true }
      );

      expect(result).toEqual(freshResult);
      expect(_cache.redisClient.get).not.toHaveBeenCalled();
      expect(mockAggregator).toHaveBeenCalled();
    });

    it('should handle cache errors gracefully', async () => {
      const freshResult = { data: 'fresh' };
      _cache.redisClient.get.mockRejectedValue(new Error('Redis error'));
      _metrics.measureOperation.mockImplementation((_, fn) => fn());

      const mockAggregator = _globals.jest.fn().mockResolvedValue(freshResult);
      const result = await (0, _dataProcessor.aggregateWithCache)('test:key', mockAggregator);

      expect(result).toEqual(freshResult);
      expect(mockAggregator).toHaveBeenCalled();
    });
  });

  describe('processTimeSeriesData', () => {
    const testData = [
    { timestamp: '2024-03-01T00:00:00Z', value: 10, type: 'A' },
    { timestamp: '2024-03-01T01:00:00Z', value: 20, type: 'A' },
    { timestamp: '2024-03-01T00:00:00Z', value: 15, type: 'B' },
    { timestamp: '2024-03-01T01:00:00Z', value: 25, type: 'B' }];


    it('should process time series data with default options', async () => {
      _cache.redisClient.get.mockResolvedValue(null);
      _metrics.measureOperation.mockImplementation((_, fn) => fn());

      const result = await (0, _dataProcessor.processTimeSeriesData)(testData);

      expect(result).toHaveLength(2); // 2 unique time periods
      expect(result[0].value).toBe(25); // Sum of values for first time period
      expect(result[1].value).toBe(45); // Sum of values for second time period
    });

    it('should process time series data with custom dimensions', async () => {
      _cache.redisClient.get.mockResolvedValue(null);
      _metrics.measureOperation.mockImplementation((_, fn) => fn());

      const result = await (0, _dataProcessor.processTimeSeriesData)(testData, {
        interval: '1h',
        aggregationType: 'sum',
        dimensions: ['type']
      });

      expect(result).toHaveLength(4); // 2 time periods * 2 types
      const typeAData = (0, _filter.default)(result).call(result, (r) => {var _context;return (0, _includes.default)(_context = r.dimensions).call(_context, 'A');});
      expect(typeAData).toHaveLength(2);
      expect(typeAData[0].value).toBe(10);
      expect(typeAData[1].value).toBe(20);
    });

    it('should handle different aggregation types', async () => {
      _cache.redisClient.get.mockResolvedValue(null);
      _metrics.measureOperation.mockImplementation((_, fn) => fn());

      const avgResult = await (0, _dataProcessor.processTimeSeriesData)(testData, {
        interval: '1h',
        aggregationType: 'avg'
      });

      expect(avgResult).toHaveLength(2);
      expect(avgResult[0].value).toBe(12.5); // Average of first time period
      expect(avgResult[1].value).toBe(22.5); // Average of second time period
    });

    it('should use cached results when available', async () => {
      const cachedResult = [
      { timestamp: '2024-03-01T00:00:00Z', value: 100 }];

      _cache.redisClient.get.mockResolvedValue((0, _stringify.default)(cachedResult));

      const result = await (0, _dataProcessor.processTimeSeriesData)(testData);

      expect(result).toEqual(cachedResult);
      expect(_metrics.measureOperation).not.toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,