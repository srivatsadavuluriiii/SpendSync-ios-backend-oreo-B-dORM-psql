"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/applyDecoratedDescriptor"));var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));var _globals = require("@jest/globals");
var _ioredis = _interopRequireDefault(require("ioredis"));
var _cache = require("../../src/utils/cache.js");







// Mock Redis
_globals.jest.mock('ioredis');

describe('Cache Utilities', () => {
  let mockRedis;

  beforeEach(() => {
    // Clear all mocks
    _globals.jest.clearAllMocks();

    // Setup Redis mock
    mockRedis = {
      get: _globals.jest.fn(),
      setex: _globals.jest.fn(),
      pipeline: _globals.jest.fn(),
      keys: _globals.jest.fn(),
      del: _globals.jest.fn()
    };

    // Mock pipeline operations
    mockRedis.pipeline.mockReturnValue({
      setex: _globals.jest.fn().mockReturnThis(),
      exec: _globals.jest.fn().mockResolvedValue([])
    });

    _ioredis.default.mockImplementation(() => mockRedis);
  });

  describe('withCache Decorator', () => {
    it('should return cached value when available', async () => {var _dec, _class;
      const cachedValue = { data: 'test' };
      mockRedis.get.mockResolvedValue((0, _stringify.default)(cachedValue));let

      TestClass = (_dec =
      (0, _cache.withCache)('user', () => 'testKey'), _class = class TestClass {
        async getData() {
          return { fresh: 'data' };
        }
      }, (0, _applyDecoratedDescriptor2.default)(_class.prototype, "getData", [_dec], (0, _getOwnPropertyDescriptor.default)(_class.prototype, "getData"), _class.prototype), _class);

      const instance = new TestClass();
      const result = await instance.getData();

      expect(result).toEqual(cachedValue);
      expect(mockRedis.get).toHaveBeenCalled();
      expect(mockRedis.setex).not.toHaveBeenCalled();
    });

    it('should cache result when no cached value exists', async () => {var _dec2, _class2;
      mockRedis.get.mockResolvedValue(null);let

      TestClass = (_dec2 =
      (0, _cache.withCache)('user', () => 'testKey'), _class2 = class TestClass {
        async getData() {
          return { fresh: 'data' };
        }
      }, (0, _applyDecoratedDescriptor2.default)(_class2.prototype, "getData", [_dec2], (0, _getOwnPropertyDescriptor.default)(_class2.prototype, "getData"), _class2.prototype), _class2);

      const instance = new TestClass();
      const result = await instance.getData();

      expect(result).toEqual({ fresh: 'data' });
      expect(mockRedis.get).toHaveBeenCalled();
      expect(mockRedis.setex).toHaveBeenCalledWith(
        expect.any(String),
        _cache.CACHE_TTL.USER_METRICS,
        (0, _stringify.default)({ fresh: 'data' })
      );
    });

    it('should handle cache errors gracefully', async () => {var _dec3, _class3;
      mockRedis.get.mockRejectedValue(new Error('Redis error'));let

      TestClass = (_dec3 =
      (0, _cache.withCache)('user', () => 'testKey'), _class3 = class TestClass {
        async getData() {
          return { fresh: 'data' };
        }
      }, (0, _applyDecoratedDescriptor2.default)(_class3.prototype, "getData", [_dec3], (0, _getOwnPropertyDescriptor.default)(_class3.prototype, "getData"), _class3.prototype), _class3);

      const instance = new TestClass();
      const result = await instance.getData();

      expect(result).toEqual({ fresh: 'data' });
      expect(mockRedis.get).toHaveBeenCalled();
    });
  });

  describe('batchCacheOperations', () => {
    it('should execute batch operations successfully', async () => {
      const operations = [
      { key: 'key1', value: 'value1', ttl: 300 },
      { key: 'key2', value: 'value2', ttl: 600 }];


      await (0, _cache.batchCacheOperations)(operations);

      expect(mockRedis.pipeline).toHaveBeenCalled();
      const pipeline = mockRedis.pipeline();
      expect(pipeline.setex).toHaveBeenCalledTimes(2);
      expect(pipeline.exec).toHaveBeenCalled();
    });

    it('should handle batch operation errors', async () => {
      const operations = [
      { key: 'key1', value: 'value1', ttl: 300 }];


      mockRedis.pipeline.mockReturnValue({
        setex: _globals.jest.fn().mockReturnThis(),
        exec: _globals.jest.fn().mockRejectedValue(new Error('Pipeline error'))
      });

      await expect((0, _cache.batchCacheOperations)(operations)).rejects.toThrow('Pipeline error');
    });
  });

  describe('clearCacheByPattern', () => {
    it('should clear cache entries matching pattern', async () => {
      const keys = ['key1', 'key2'];
      (0, _keys.default)(mockRedis).mockResolvedValue(keys);

      await (0, _cache.clearCacheByPattern)('test*');

      expect((0, _keys.default)(mockRedis)).toHaveBeenCalledWith('test*');
      expect(mockRedis.del).toHaveBeenCalledWith(keys);
    });

    it('should handle no matching keys', async () => {
      (0, _keys.default)(mockRedis).mockResolvedValue([]);

      await (0, _cache.clearCacheByPattern)('test*');

      expect((0, _keys.default)(mockRedis)).toHaveBeenCalledWith('test*');
      expect(mockRedis.del).not.toHaveBeenCalled();
    });

    it('should handle errors during cache clearing', async () => {
      (0, _keys.default)(mockRedis).mockRejectedValue(new Error('Redis error'));

      await expect((0, _cache.clearCacheByPattern)('test*')).rejects.toThrow('Redis error');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,