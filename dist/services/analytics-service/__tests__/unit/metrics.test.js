"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _globals = require("@jest/globals");
var _promClient = _interopRequireDefault(require("prom-client"));
var _metrics = require("../../src/utils/metrics.js");















// Mock prom-client
_globals.jest.mock('prom-client', () => ({
  Histogram: _globals.jest.fn().mockImplementation(() => ({
    startTimer: _globals.jest.fn().mockReturnValue(_globals.jest.fn()),
    observe: _globals.jest.fn()
  })),
  Counter: _globals.jest.fn().mockImplementation(() => ({
    inc: _globals.jest.fn()
  })),
  Gauge: _globals.jest.fn().mockImplementation(() => ({
    set: _globals.jest.fn()
  })),
  collectDefaultMetrics: _globals.jest.fn()
}));

describe('Metrics Utilities', () => {
  beforeEach(() => {
    _globals.jest.clearAllMocks();
  });

  describe('measureOperation', () => {
    it('should measure successful operation', async () => {
      const mockEnd = _globals.jest.fn();
      _metrics.analyticsOperationDuration.startTimer.mockReturnValue(mockEnd);

      const operation = 'test_operation';
      const result = await (0, _metrics.measureOperation)(operation, async () => 'success');

      expect(result).toBe('success');
      expect(_metrics.analyticsOperationDuration.startTimer).toHaveBeenCalledWith({ operation });
      expect(mockEnd).toHaveBeenCalledWith({ status: 'success' });
      expect(_metrics.analyticsOperationTotal.inc).toHaveBeenCalledWith({
        operation,
        status: 'success'
      });
    });

    it('should handle and measure failed operation', async () => {
      const mockEnd = _globals.jest.fn();
      _metrics.analyticsOperationDuration.startTimer.mockReturnValue(mockEnd);

      const operation = 'test_operation';
      const error = new Error('Test error');

      await expect((0, _metrics.measureOperation)(operation, async () => {
        throw error;
      })).rejects.toThrow('Test error');

      expect(mockEnd).toHaveBeenCalledWith({ status: 'error' });
      expect(_metrics.analyticsOperationTotal.inc).toHaveBeenCalledWith({
        operation,
        status: 'error'
      });
      expect(_metrics.errorRate.inc).toHaveBeenCalledWith({
        error_type: 'Error',
        operation
      });
    });
  });

  describe('recordBusinessMetric', () => {
    it('should record active users metric', () => {
      const labels = { time_period: 'daily' };
      const value = 100;

      (0, _metrics.recordBusinessMetric)('active_users', labels, value);

      expect(_metrics.activeUserMetrics.set).toHaveBeenCalledWith(labels, value);
    });

    it('should record transaction volume metric', () => {
      const labels = { transaction_type: 'purchase' };
      const value = 1000;

      (0, _metrics.recordBusinessMetric)('transaction_volume', labels, value);

      expect(_metrics.transactionVolume.set).toHaveBeenCalledWith(labels, value);
    });

    it('should handle unknown metric type', () => {
      const labels = { type: 'unknown' };
      const value = 100;

      (0, _metrics.recordBusinessMetric)('unknown_metric', labels, value);

      expect(_metrics.activeUserMetrics.set).not.toHaveBeenCalled();
      expect(_metrics.transactionVolume.set).not.toHaveBeenCalled();
      expect(_metrics.errorRate.inc).not.toHaveBeenCalled();
    });

    it('should handle metric recording errors', () => {
      const labels = { time_period: 'daily' };
      const value = 100;

      _metrics.activeUserMetrics.set.mockImplementation(() => {
        throw new Error('Metric error');
      });

      (0, _metrics.recordBusinessMetric)('active_users', labels, value);

      expect(_metrics.errorRate.inc).toHaveBeenCalledWith({
        error_type: 'metric_recording',
        operation: 'active_users'
      });
    });
  });

  describe('recordCacheMetric', () => {
    it('should record cache hit', () => {
      const cacheType = 'user_data';

      (0, _metrics.recordCacheMetric)(cacheType, true);

      expect(_metrics.cacheHits.inc).toHaveBeenCalledWith({ cache_type: cacheType });
      expect(_metrics.cacheMisses.inc).not.toHaveBeenCalled();
    });

    it('should record cache miss', () => {
      const cacheType = 'user_data';

      (0, _metrics.recordCacheMetric)(cacheType, false);

      expect(_metrics.cacheMisses.inc).toHaveBeenCalledWith({ cache_type: cacheType });
      expect(_metrics.cacheHits.inc).not.toHaveBeenCalled();
    });
  });

  describe('recordDataProcessingMetrics', () => {
    it('should record processing metrics', () => {
      const operationType = 'batch_process';
      const batchSize = 100;
      const duration = 1.5;

      (0, _metrics.recordDataProcessingMetrics)(operationType, batchSize, duration);

      expect(_metrics.dataProcessingBatchSize.observe).toHaveBeenCalledWith(batchSize);
      expect(_metrics.dataProcessingDuration.observe).toHaveBeenCalledWith(
        { operation_type: operationType },
        duration
      );
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,