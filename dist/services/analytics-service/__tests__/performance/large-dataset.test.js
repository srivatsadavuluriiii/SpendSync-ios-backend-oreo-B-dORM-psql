"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));var _fill = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/fill"));var _mongoose = _interopRequireDefault(require("mongoose"));
var _setup = require("../setup.js");






var _AnalyticsEvent = _interopRequireDefault(require("../../src/models/AnalyticsEvent.js"));
var _SpendingReport = _interopRequireDefault(require("../../src/models/SpendingReport.js"));

describe('Large Dataset Performance Tests', () => {
  beforeAll(async () => {
    await (0, _setup.setupTestDB)();
  });

  afterAll(async () => {
    await (0, _setup.teardownTestDB)();
  });

  beforeEach(async () => {
    await _AnalyticsEvent.default.deleteMany({});
    await _SpendingReport.default.deleteMany({});
  });

  describe('Data Ingestion Performance', () => {
    test('should handle bulk insertion within time threshold', async () => {
      const largeDataset = (0, _setup.generateTestExpenses)(10000);

      const executionTime = await (0, _setup.measureExecutionTime)(async () => {
        await _AnalyticsEvent.default.insertMany(largeDataset, { ordered: false });
      });

      expect(executionTime).toBeLessThan(_setup.performanceThresholds.queryTime);

      // Verify data integrity
      const count = await _AnalyticsEvent.default.countDocuments();
      expect(count).toBe(10000);
    });

    test('should maintain performance with concurrent insertions', async () => {
      const batchSize = 1000;
      const concurrentBatches = 5;
      const batches = (0, _from.default)({ length: concurrentBatches }, () =>
      (0, _setup.generateTestExpenses)(batchSize)
      );

      const executionTime = await (0, _setup.measureExecutionTime)(async () => {
        await _promise.default.all((0, _map.default)(batches).call(batches, (batch) =>
        _AnalyticsEvent.default.insertMany(batch, { ordered: false })
        ));
      });

      expect(executionTime).toBeLessThan(_setup.performanceThresholds.queryTime * 2);

      // Verify all data was inserted
      const count = await _AnalyticsEvent.default.countDocuments();
      expect(count).toBe(batchSize * concurrentBatches);
    });
  });

  describe('Query Performance', () => {
    beforeEach(async () => {
      // Insert large dataset for query testing
      const largeDataset = (0, _setup.generateTestExpenses)(10000);
      await _AnalyticsEvent.default.insertMany(largeDataset, { ordered: false });
    });

    test('should efficiently query and aggregate large datasets', async () => {
      const executionTime = await (0, _setup.measureExecutionTime)(async () => {
        const result = await _AnalyticsEvent.default.aggregate([
        {
          $group: {
            _id: {
              category: '$category',
              month: { $month: '$timestamp' }
            },
            totalAmount: { $sum: '$amount' },
            count: { $sum: 1 }
          }
        },
        { $sort: { totalAmount: -1 } }]
        );

        expect(result.length).toBeGreaterThan(0);
      });

      expect(executionTime).toBeLessThan(_setup.performanceThresholds.queryTime);
    });

    test('should maintain performance with complex queries', async () => {
      const executionTime = await (0, _setup.measureExecutionTime)(async () => {
        const result = await _AnalyticsEvent.default.aggregate([
        {
          $match: {
            timestamp: {
              $gte: new Date(new Date().getFullYear(), 0, 1),
              $lt: new Date()
            }
          }
        },
        {
          $group: {
            _id: {
              category: '$category',
              month: { $month: '$timestamp' },
              day: { $dayOfMonth: '$timestamp' }
            },
            dailyTotal: { $sum: '$amount' }
          }
        },
        {
          $group: {
            _id: {
              category: '$_id.category',
              month: '$_id.month'
            },
            avgDailySpending: { $avg: '$dailyTotal' },
            totalSpending: { $sum: '$dailyTotal' }
          }
        },
        { $sort: { '_id.month': 1, totalSpending: -1 } }]
        );

        expect(result.length).toBeGreaterThan(0);
      });

      expect(executionTime).toBeLessThan(_setup.performanceThresholds.queryTime * 2);
    });
  });

  describe('Memory Usage', () => {
    test('should efficiently process large datasets in batches', async () => {
      const totalRecords = 50000;
      const batchSize = 5000;
      const batches = Math.ceil(totalRecords / batchSize);

      const initialMemory = process.memoryUsage().heapUsed;

      for (let i = 0; i < batches; i++) {
        const batch = (0, _setup.generateTestExpenses)(batchSize);
        await _AnalyticsEvent.default.insertMany(batch, { ordered: false });

        // Check memory usage after each batch
        const currentMemory = process.memoryUsage().heapUsed;
        const memoryIncrease = currentMemory - initialMemory;

        expect(memoryIncrease).toBeLessThan(_setup.performanceThresholds.memoryUsage);
      }

      // Verify total records
      const count = await _AnalyticsEvent.default.countDocuments();
      expect(count).toBe(totalRecords);
    });

    test('should handle memory-intensive aggregations', async () => {
      // Insert test data
      const testData = (0, _setup.generateTestExpenses)(20000);
      await _AnalyticsEvent.default.insertMany(testData, { ordered: false });

      const initialMemory = process.memoryUsage().heapUsed;

      await _AnalyticsEvent.default.aggregate([
      {
        $group: {
          _id: {
            userId: '$userId',
            category: '$category',
            month: { $month: '$timestamp' }
          },
          transactions: { $push: '$$ROOT' }
        }
      },
      {
        $project: {
          userId: '$_id.userId',
          category: '$_id.category',
          month: '$_id.month',
          transactionCount: { $size: '$transactions' },
          totalAmount: { $sum: '$transactions.amount' },
          avgAmount: { $avg: '$transactions.amount' }
        }
      }]
      );

      const finalMemory = process.memoryUsage().heapUsed;
      const memoryIncrease = finalMemory - initialMemory;

      expect(memoryIncrease).toBeLessThan(_setup.performanceThresholds.memoryUsage);
    });
  });

  describe('Concurrent Operations', () => {
    beforeEach(async () => {
      // Insert base dataset
      const baseData = (0, _setup.generateTestExpenses)(5000);
      await _AnalyticsEvent.default.insertMany(baseData);
    });

    test('should handle concurrent read operations', async () => {
      const concurrentQueries = 10;
      const queries = (0, _from.default)({ length: concurrentQueries }, () => ({
        category: ['food', 'transport', 'entertainment'][Math.floor(Math.random() * 3)]
      }));

      const executionTime = await (0, _setup.measureExecutionTime)(async () => {
        await _promise.default.all((0, _map.default)(queries).call(queries, (query) =>
        (0, _find.default)(_AnalyticsEvent.default).call(_AnalyticsEvent.default, { category: query.category })
        ));
      });

      expect(executionTime).toBeLessThan(_setup.performanceThresholds.queryTime * 2);
    });

    test('should handle mixed read/write operations', async () => {var _context, _context2, _context3;
      const operations = [
      ...(0, _fill.default)(_context = Array(5)).call(_context, () => (0, _find.default)(_AnalyticsEvent.default).call(_AnalyticsEvent.default, { category: 'food' })),
      ...(0, _fill.default)(_context2 = Array(3)).call(_context2, () => _AnalyticsEvent.default.insertMany((0, _setup.generateTestExpenses)(100))),
      ...(0, _fill.default)(_context3 = Array(2)).call(_context3, () => _AnalyticsEvent.default.aggregate([
      { $group: { _id: '$category', total: { $sum: '$amount' } } }]
      ))];


      const executionTime = await (0, _setup.measureExecutionTime)(async () => {
        await _promise.default.all((0, _map.default)(operations).call(operations, (op) => op()));
      });

      expect(executionTime).toBeLessThan(_setup.performanceThresholds.queryTime * 3);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,