"use strict";var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");_Object$defineProperty(exports, "__esModule", { value: true });exports.teardownTestDB = exports.setupTestDB = exports.performanceThresholds = exports.mockData = exports.measureExecutionTime = exports.logger = exports.generateTestExpenses = exports.createTestServer = void 0;var _mongoose = _interopRequireDefault(require("mongoose"));
var _mongodbMemoryServer = require("mongodb-memory-server");
var _winston = require("winston");
var _globals = require("@jest/globals");
var _ioredis = _interopRequireDefault(require("ioredis"));

// Disable logging during tests
const logger = exports.logger = (0, _winston.createLogger)({
  silent: true
});

// Setup MongoDB Memory Server
let mongoServer;

// Global test setup
const setupTestDB = async () => {
  mongoServer = await _mongodbMemoryServer.MongoMemoryServer.create();
  const mongoUri = mongoServer.getUri();
  await _mongoose.default.connect(mongoUri);
};

// Global test teardown
exports.setupTestDB = setupTestDB;const teardownTestDB = async () => {
  await _mongoose.default.disconnect();
  await mongoServer.stop();
};

// Test data generators
exports.teardownTestDB = teardownTestDB;const generateTestExpenses = (count = 100) => {
  const expenses = [];
  const categories = ['food', 'transport', 'entertainment', 'utilities', 'shopping'];
  const startDate = new Date(2023, 0, 1);
  const endDate = new Date();

  for (let i = 0; i < count; i++) {
    expenses.push({
      userId: 'test-user-' + Math.floor(i / 10),
      category: categories[Math.floor(Math.random() * categories.length)],
      amount: Math.random() * 1000,
      timestamp: new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime())),
      description: `Test expense ${i}`,
      eventType: 'EXPENSE_CREATED'
    });
  }
  return expenses;
};

// Performance test helpers
exports.generateTestExpenses = generateTestExpenses;const measureExecutionTime = async (fn) => {
  const start = process.hrtime();
  await fn();
  const [seconds, nanoseconds] = process.hrtime(start);
  return seconds * 1000 + nanoseconds / 1000000; // Convert to milliseconds
};

// API test helpers
exports.measureExecutionTime = measureExecutionTime;const createTestServer = () => {
  const express = require('express');
  const app = express();
  app.use(express.json());
  return app;
};

// Mock data for different test scenarios
exports.createTestServer = createTestServer;const mockData = exports.mockData = {
  regularSpending: generateTestExpenses(100),
  largeDataset: generateTestExpenses(10000),
  edgeCases: [
  {
    userId: 'test-user-edge',
    category: 'food',
    amount: 0,
    timestamp: new Date(),
    description: 'Zero amount expense',
    eventType: 'EXPENSE_CREATED'
  },
  {
    userId: 'test-user-edge',
    category: 'food',
    amount: 999999.99,
    timestamp: new Date(),
    description: 'Very large amount',
    eventType: 'EXPENSE_CREATED'
  }]

};

// Performance thresholds
const performanceThresholds = exports.performanceThresholds = {
  queryTime: 1000, // milliseconds
  memoryUsage: 100 * 1024 * 1024, // 100MB
  responseTime: 200 // milliseconds
};

// Mock Redis
_globals.jest.mock('ioredis', () => {
  const mockRedis = {
    get: _globals.jest.fn(),
    setex: _globals.jest.fn(),
    pipeline: _globals.jest.fn(),
    keys: _globals.jest.fn(),
    del: _globals.jest.fn(),
    quit: _globals.jest.fn(),
    ping: _globals.jest.fn()
  };

  mockRedis.pipeline.mockReturnValue({
    setex: _globals.jest.fn().mockReturnThis(),
    exec: _globals.jest.fn().mockResolvedValue([])
  });

  return _globals.jest.fn(() => mockRedis);
});

// Mock Winston logger
_globals.jest.mock('winston', () => ({
  createLogger: _globals.jest.fn(() => ({
    info: _globals.jest.fn(),
    error: _globals.jest.fn(),
    warn: _globals.jest.fn(),
    debug: _globals.jest.fn()
  })),
  format: {
    combine: _globals.jest.fn(),
    timestamp: _globals.jest.fn(),
    json: _globals.jest.fn()
  },
  transports: {
    Console: _globals.jest.fn(),
    File: _globals.jest.fn()
  }
}));

// Mock Prometheus client
_globals.jest.mock('prom-client', () => ({
  Histogram: _globals.jest.fn().mockImplementation(() => ({
    startTimer: _globals.jest.fn().mockReturnValue(_globals.jest.fn()),
    observe: _globals.jest.fn()
  })),
  Counter: _globals.jest.fn().mockImplementation(() => ({
    inc: _globals.jest.fn()
  })),
  Gauge: _globals.jest.fn().mockImplementation(() => ({
    set: _globals.jest.fn()
  })),
  collectDefaultMetrics: _globals.jest.fn()
}));

let mongod;

// Setup before all tests
beforeAll(async () => {
  // Start in-memory MongoDB instance
  mongod = await _mongodbMemoryServer.MongoMemoryServer.create();
  const mongoUri = mongod.getUri();

  // Connect to in-memory database
  await _mongoose.default.connect(mongoUri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  });
});

// Clear database and mocks between tests
beforeEach(async () => {
  // Clear all collections
  const collections = _mongoose.default.connection.collections;
  for (const key in collections) {
    await collections[key].deleteMany();
  }

  // Clear all mocks
  _globals.jest.clearAllMocks();
});

// Cleanup after all tests
afterAll(async () => {
  // Disconnect from database
  await _mongoose.default.disconnect();

  // Stop in-memory database
  if (mongod) {
    await mongod.stop();
  }
});

// Global test timeout
_globals.jest.setTimeout(30000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,