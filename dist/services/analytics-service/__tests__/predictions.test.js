"use strict";var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));var _supertest = _interopRequireDefault(require("supertest"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _index = _interopRequireDefault(require("../src/index.js"));
var _AnalyticsEvent = _interopRequireDefault(require("../src/models/AnalyticsEvent.js"));

describe('Predictions Endpoints', () => {
  beforeEach(async () => {
    await _AnalyticsEvent.default.deleteMany({});
  });

  describe('GET /predictions', () => {
    it('should return 401 without user ID', async () => {
      const response = await (0, _supertest.default)(_index.default).
      get('/predictions').
      expect(401);

      expect(response.body.error).toBe('User ID is required');
    });

    it('should return predictions with confidence intervals', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() },
      { amount: 200, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/predictions').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('predictions');
      expect(response.body.predictions).toHaveProperty('amount');
      expect(response.body.predictions).toHaveProperty('confidenceInterval');
    });

    it('should respect the months parameter', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/predictions').
      query({
        userId: userId.toString(),
        months: 3
      }).
      expect(200);

      expect(response.body.predictions).toHaveProperty('amount');
      expect(response.body.predictions).toHaveProperty('confidenceInterval');
    });
  });

  describe('GET /predictions/by-category', () => {
    it('should return category-specific predictions', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/predictions/by-category').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('categories');
      expect(response.body.categories).toHaveProperty('groceries');
      expect(response.body.categories.groceries).toHaveProperty('prediction');
    });

    it('should filter by specific category', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/predictions/by-category').
      query({
        userId: userId.toString(),
        category: 'groceries'
      }).
      expect(200);

      expect(response.body).toHaveProperty('categories');
      expect(response.body.categories).toHaveProperty('groceries');
      expect(response.body.categories.groceries).toHaveProperty('prediction');
    });
  });

  describe('GET /predictions/seasonal', () => {
    it('should identify seasonal patterns', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const transactions = [
      { amount: 100, category: 'groceries', timestamp: new Date() },
      { amount: 150, category: 'groceries', timestamp: new Date() }];


      for (const t of transactions) {
        await new _AnalyticsEvent.default({
          userId,
          eventType: 'EXPENSE_CREATED',
          ...t
        }).save();
      }

      const response = await (0, _supertest.default)(_index.default).
      get('/predictions/seasonal').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body).toHaveProperty('patterns');
      expect((0, _isArray.default)(response.body.patterns)).toBe(true);
    });

    it('should handle empty data gracefully', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const response = await (0, _supertest.default)(_index.default).
      get('/predictions/seasonal').
      query({ userId: userId.toString() }).
      expect(200);

      expect(response.body.patterns).toEqual([]);
    });
  });

  describe('Input Validation', () => {
    it('should validate months parameter', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const response = await (0, _supertest.default)(_index.default).
      get('/predictions').
      query({
        userId: userId.toString(),
        months: 'invalid'
      }).
      expect(400);

      expect(response.body.error).toBe('Invalid months parameter');
    });

    it('should limit months to 12', async () => {
      const userId = new _mongoose.default.Types.ObjectId();
      const response = await (0, _supertest.default)(_index.default).
      get('/predictions').
      query({
        userId: userId.toString(),
        months: 13
      }).
      expect(400);

      expect(response.body.error).toBe('Months parameter must be between 1 and 12');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,