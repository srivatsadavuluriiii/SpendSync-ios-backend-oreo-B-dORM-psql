"use strict"; /**
 * API Gateway Configuration
 * 
 * Contains configuration for API Gateway and its connected services
 */

const env = process.env.NODE_ENV || 'development';

// Default service URLs for different environments
const serviceUrls = {
  development: {
    userService: process.env.USER_SERVICE_URL || 'http://localhost:3001',
    expenseService: process.env.EXPENSE_SERVICE_URL || 'http://localhost:3002',
    settlementService: process.env.SETTLEMENT_SERVICE_URL || 'http://localhost:3003',
    notificationService: process.env.NOTIFICATION_SERVICE_URL || 'http://localhost:3004'
  },
  test: {
    userService: process.env.USER_SERVICE_URL || 'http://localhost:3001',
    expenseService: process.env.EXPENSE_SERVICE_URL || 'http://localhost:3002',
    settlementService: process.env.SETTLEMENT_SERVICE_URL || 'http://localhost:3003',
    notificationService: process.env.NOTIFICATION_SERVICE_URL || 'http://localhost:3004'
  },
  production: {
    userService: process.env.USER_SERVICE_URL,
    expenseService: process.env.EXPENSE_SERVICE_URL,
    settlementService: process.env.SETTLEMENT_SERVICE_URL,
    notificationService: process.env.NOTIFICATION_SERVICE_URL
  }
};

// Gateway configuration
const config = {
  port: process.env.PORT || 3000,
  jwtSecret: process.env.JWT_SECRET || 'spendsync-secret-key-dev',
  serviceUrls: serviceUrls[env],
  rateLimit: {
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    standardHeaders: true,
    legacyHeaders: false
  },
  cors: {
    origin: process.env.CORS_ORIGIN || '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
  },
  timeout: 30000, // 30 seconds
  logging: {
    level: env === 'production' ? 'info' : 'debug'
  }
};

module.exports = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJlbnYiLCJwcm9jZXNzIiwiTk9ERV9FTlYiLCJzZXJ2aWNlVXJscyIsImRldmVsb3BtZW50IiwidXNlclNlcnZpY2UiLCJVU0VSX1NFUlZJQ0VfVVJMIiwiZXhwZW5zZVNlcnZpY2UiLCJFWFBFTlNFX1NFUlZJQ0VfVVJMIiwic2V0dGxlbWVudFNlcnZpY2UiLCJTRVRUTEVNRU5UX1NFUlZJQ0VfVVJMIiwibm90aWZpY2F0aW9uU2VydmljZSIsIk5PVElGSUNBVElPTl9TRVJWSUNFX1VSTCIsInRlc3QiLCJwcm9kdWN0aW9uIiwiY29uZmlnIiwicG9ydCIsIlBPUlQiLCJqd3RTZWNyZXQiLCJKV1RfU0VDUkVUIiwicmF0ZUxpbWl0Iiwid2luZG93TXMiLCJtYXgiLCJzdGFuZGFyZEhlYWRlcnMiLCJsZWdhY3lIZWFkZXJzIiwiY29ycyIsIm9yaWdpbiIsIkNPUlNfT1JJR0lOIiwibWV0aG9kcyIsImFsbG93ZWRIZWFkZXJzIiwidGltZW91dCIsImxvZ2dpbmciLCJsZXZlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpLWdhdGV3YXkvY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQVBJIEdhdGV3YXkgQ29uZmlndXJhdGlvblxuICogXG4gKiBDb250YWlucyBjb25maWd1cmF0aW9uIGZvciBBUEkgR2F0ZXdheSBhbmQgaXRzIGNvbm5lY3RlZCBzZXJ2aWNlc1xuICovXG5cbmNvbnN0IGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCc7XG5cbi8vIERlZmF1bHQgc2VydmljZSBVUkxzIGZvciBkaWZmZXJlbnQgZW52aXJvbm1lbnRzXG5jb25zdCBzZXJ2aWNlVXJscyA9IHtcbiAgZGV2ZWxvcG1lbnQ6IHtcbiAgICB1c2VyU2VydmljZTogcHJvY2Vzcy5lbnYuVVNFUl9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAxJyxcbiAgICBleHBlbnNlU2VydmljZTogcHJvY2Vzcy5lbnYuRVhQRU5TRV9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAyJyxcbiAgICBzZXR0bGVtZW50U2VydmljZTogcHJvY2Vzcy5lbnYuU0VUVExFTUVOVF9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAzJyxcbiAgICBub3RpZmljYXRpb25TZXJ2aWNlOiBwcm9jZXNzLmVudi5OT1RJRklDQVRJT05fU0VSVklDRV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwNCdcbiAgfSxcbiAgdGVzdDoge1xuICAgIHVzZXJTZXJ2aWNlOiBwcm9jZXNzLmVudi5VU0VSX1NFUlZJQ0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDEnLFxuICAgIGV4cGVuc2VTZXJ2aWNlOiBwcm9jZXNzLmVudi5FWFBFTlNFX1NFUlZJQ0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDInLFxuICAgIHNldHRsZW1lbnRTZXJ2aWNlOiBwcm9jZXNzLmVudi5TRVRUTEVNRU5UX1NFUlZJQ0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDMnLFxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2U6IHByb2Nlc3MuZW52Lk5PVElGSUNBVElPTl9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDA0J1xuICB9LFxuICBwcm9kdWN0aW9uOiB7XG4gICAgdXNlclNlcnZpY2U6IHByb2Nlc3MuZW52LlVTRVJfU0VSVklDRV9VUkwsXG4gICAgZXhwZW5zZVNlcnZpY2U6IHByb2Nlc3MuZW52LkVYUEVOU0VfU0VSVklDRV9VUkwsXG4gICAgc2V0dGxlbWVudFNlcnZpY2U6IHByb2Nlc3MuZW52LlNFVFRMRU1FTlRfU0VSVklDRV9VUkwsXG4gICAgbm90aWZpY2F0aW9uU2VydmljZTogcHJvY2Vzcy5lbnYuTk9USUZJQ0FUSU9OX1NFUlZJQ0VfVVJMXG4gIH1cbn07XG5cbi8vIEdhdGV3YXkgY29uZmlndXJhdGlvblxuY29uc3QgY29uZmlnID0ge1xuICBwb3J0OiBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDAsXG4gIGp3dFNlY3JldDogcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAnc3BlbmRzeW5jLXNlY3JldC1rZXktZGV2JyxcbiAgc2VydmljZVVybHM6IHNlcnZpY2VVcmxzW2Vudl0sXG4gIHJhdGVMaW1pdDoge1xuICAgIHdpbmRvd01zOiAxNSAqIDYwICogMTAwMCwgLy8gMTUgbWludXRlc1xuICAgIG1heDogMTAwLCAvLyBMaW1pdCBlYWNoIElQIHRvIDEwMCByZXF1ZXN0cyBwZXIgd2luZG93TXNcbiAgICBzdGFuZGFyZEhlYWRlcnM6IHRydWUsXG4gICAgbGVnYWN5SGVhZGVyczogZmFsc2VcbiAgfSxcbiAgY29yczoge1xuICAgIG9yaWdpbjogcHJvY2Vzcy5lbnYuQ09SU19PUklHSU4gfHwgJyonLFxuICAgIG1ldGhvZHM6IFsnR0VUJywgJ1BPU1QnLCAnUFVUJywgJ0RFTEVURScsICdQQVRDSCcsICdPUFRJT05TJ10sXG4gICAgYWxsb3dlZEhlYWRlcnM6IFsnQ29udGVudC1UeXBlJywgJ0F1dGhvcml6YXRpb24nXVxuICB9LFxuICB0aW1lb3V0OiAzMDAwMCwgLy8gMzAgc2Vjb25kc1xuICBsb2dnaW5nOiB7XG4gICAgbGV2ZWw6IGVudiA9PT0gJ3Byb2R1Y3Rpb24nID8gJ2luZm8nIDogJ2RlYnVnJ1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZzsgIl0sIm1hcHBpbmdzIjoiY0FBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDRCxHQUFHLENBQUNFLFFBQVEsSUFBSSxhQUFhOztBQUVqRDtBQUNBLE1BQU1DLFdBQVcsR0FBRztFQUNsQkMsV0FBVyxFQUFFO0lBQ1hDLFdBQVcsRUFBRUosT0FBTyxDQUFDRCxHQUFHLENBQUNNLGdCQUFnQixJQUFJLHVCQUF1QjtJQUNwRUMsY0FBYyxFQUFFTixPQUFPLENBQUNELEdBQUcsQ0FBQ1EsbUJBQW1CLElBQUksdUJBQXVCO0lBQzFFQyxpQkFBaUIsRUFBRVIsT0FBTyxDQUFDRCxHQUFHLENBQUNVLHNCQUFzQixJQUFJLHVCQUF1QjtJQUNoRkMsbUJBQW1CLEVBQUVWLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDWSx3QkFBd0IsSUFBSTtFQUMvRCxDQUFDO0VBQ0RDLElBQUksRUFBRTtJQUNKUixXQUFXLEVBQUVKLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDTSxnQkFBZ0IsSUFBSSx1QkFBdUI7SUFDcEVDLGNBQWMsRUFBRU4sT0FBTyxDQUFDRCxHQUFHLENBQUNRLG1CQUFtQixJQUFJLHVCQUF1QjtJQUMxRUMsaUJBQWlCLEVBQUVSLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDVSxzQkFBc0IsSUFBSSx1QkFBdUI7SUFDaEZDLG1CQUFtQixFQUFFVixPQUFPLENBQUNELEdBQUcsQ0FBQ1ksd0JBQXdCLElBQUk7RUFDL0QsQ0FBQztFQUNERSxVQUFVLEVBQUU7SUFDVlQsV0FBVyxFQUFFSixPQUFPLENBQUNELEdBQUcsQ0FBQ00sZ0JBQWdCO0lBQ3pDQyxjQUFjLEVBQUVOLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDUSxtQkFBbUI7SUFDL0NDLGlCQUFpQixFQUFFUixPQUFPLENBQUNELEdBQUcsQ0FBQ1Usc0JBQXNCO0lBQ3JEQyxtQkFBbUIsRUFBRVYsT0FBTyxDQUFDRCxHQUFHLENBQUNZO0VBQ25DO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBLE1BQU1HLE1BQU0sR0FBRztFQUNiQyxJQUFJLEVBQUVmLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDaUIsSUFBSSxJQUFJLElBQUk7RUFDOUJDLFNBQVMsRUFBRWpCLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDbUIsVUFBVSxJQUFJLDBCQUEwQjtFQUMvRGhCLFdBQVcsRUFBRUEsV0FBVyxDQUFDSCxHQUFHLENBQUM7RUFDN0JvQixTQUFTLEVBQUU7SUFDVEMsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFO0lBQzFCQyxHQUFHLEVBQUUsR0FBRyxFQUFFO0lBQ1ZDLGVBQWUsRUFBRSxJQUFJO0lBQ3JCQyxhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUNEQyxJQUFJLEVBQUU7SUFDSkMsTUFBTSxFQUFFekIsT0FBTyxDQUFDRCxHQUFHLENBQUMyQixXQUFXLElBQUksR0FBRztJQUN0Q0MsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7SUFDN0RDLGNBQWMsRUFBRSxDQUFDLGNBQWMsRUFBRSxlQUFlO0VBQ2xELENBQUM7RUFDREMsT0FBTyxFQUFFLEtBQUssRUFBRTtFQUNoQkMsT0FBTyxFQUFFO0lBQ1BDLEtBQUssRUFBRWhDLEdBQUcsS0FBSyxZQUFZLEdBQUcsTUFBTSxHQUFHO0VBQ3pDO0FBQ0YsQ0FBQzs7QUFFRGlDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbkIsTUFBTSIsImlnbm9yZUxpc3QiOltdfQ==