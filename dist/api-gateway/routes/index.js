"use strict"; /**
 * API Gateway Routes
 * 
 * Main router that combines all API routes
 */

const express = require('express');
const authRoutes = require('./auth.routes');
const { forwardRequest } = require('../utils/service-proxy');
const { asyncHandler } = require('../../shared/middleware');

const router = express.Router();

// Authentication routes
router.use('/auth', authRoutes);

// User Service Routes
router.use('/users', asyncHandler(async (req, res, next) => {
  await forwardRequest(req, res, 'userService');
}));

// Expense Service Routes
router.use('/expenses', asyncHandler(async (req, res, next) => {
  await forwardRequest(req, res, 'expenseService');
}));

// Settlement Service Routes
router.use('/settlements', asyncHandler(async (req, res, next) => {
  await forwardRequest(req, res, 'settlementService');
}));

// Group Routes (handled by User Service)
router.use('/groups', asyncHandler(async (req, res, next) => {
  await forwardRequest(req, res, 'userService');
}));

// Notification Routes
router.use('/notifications', asyncHandler(async (req, res, next) => {
  await forwardRequest(req, res, 'notificationService');
}));

// Payment Routes
router.use('/payments', asyncHandler(async (req, res, next) => {
  await forwardRequest(req, res, 'paymentService');
}));

module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImF1dGhSb3V0ZXMiLCJmb3J3YXJkUmVxdWVzdCIsImFzeW5jSGFuZGxlciIsInJvdXRlciIsIlJvdXRlciIsInVzZSIsInJlcSIsInJlcyIsIm5leHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwaS1nYXRld2F5L3JvdXRlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBHYXRld2F5IFJvdXRlc1xuICogXG4gKiBNYWluIHJvdXRlciB0aGF0IGNvbWJpbmVzIGFsbCBBUEkgcm91dGVzXG4gKi9cblxuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IGF1dGhSb3V0ZXMgPSByZXF1aXJlKCcuL2F1dGgucm91dGVzJyk7XG5jb25zdCB7IGZvcndhcmRSZXF1ZXN0IH0gPSByZXF1aXJlKCcuLi91dGlscy9zZXJ2aWNlLXByb3h5Jyk7XG5jb25zdCB7IGFzeW5jSGFuZGxlciB9ID0gcmVxdWlyZSgnLi4vLi4vc2hhcmVkL21pZGRsZXdhcmUnKTtcblxuY29uc3Qgcm91dGVyID0gZXhwcmVzcy5Sb3V0ZXIoKTtcblxuLy8gQXV0aGVudGljYXRpb24gcm91dGVzXG5yb3V0ZXIudXNlKCcvYXV0aCcsIGF1dGhSb3V0ZXMpO1xuXG4vLyBVc2VyIFNlcnZpY2UgUm91dGVzXG5yb3V0ZXIudXNlKCcvdXNlcnMnLCBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGF3YWl0IGZvcndhcmRSZXF1ZXN0KHJlcSwgcmVzLCAndXNlclNlcnZpY2UnKTtcbn0pKTtcblxuLy8gRXhwZW5zZSBTZXJ2aWNlIFJvdXRlc1xucm91dGVyLnVzZSgnL2V4cGVuc2VzJywgYXN5bmNIYW5kbGVyKGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBhd2FpdCBmb3J3YXJkUmVxdWVzdChyZXEsIHJlcywgJ2V4cGVuc2VTZXJ2aWNlJyk7XG59KSk7XG5cbi8vIFNldHRsZW1lbnQgU2VydmljZSBSb3V0ZXNcbnJvdXRlci51c2UoJy9zZXR0bGVtZW50cycsIGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgYXdhaXQgZm9yd2FyZFJlcXVlc3QocmVxLCByZXMsICdzZXR0bGVtZW50U2VydmljZScpO1xufSkpO1xuXG4vLyBHcm91cCBSb3V0ZXMgKGhhbmRsZWQgYnkgVXNlciBTZXJ2aWNlKVxucm91dGVyLnVzZSgnL2dyb3VwcycsIGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgYXdhaXQgZm9yd2FyZFJlcXVlc3QocmVxLCByZXMsICd1c2VyU2VydmljZScpO1xufSkpO1xuXG4vLyBOb3RpZmljYXRpb24gUm91dGVzXG5yb3V0ZXIudXNlKCcvbm90aWZpY2F0aW9ucycsIGFzeW5jSGFuZGxlcihhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgYXdhaXQgZm9yd2FyZFJlcXVlc3QocmVxLCByZXMsICdub3RpZmljYXRpb25TZXJ2aWNlJyk7XG59KSk7XG5cbi8vIFBheW1lbnQgUm91dGVzXG5yb3V0ZXIudXNlKCcvcGF5bWVudHMnLCBhc3luY0hhbmRsZXIoYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGF3YWl0IGZvcndhcmRSZXF1ZXN0KHJlcSwgcmVzLCAncGF5bWVudFNlcnZpY2UnKTtcbn0pKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7ICJdLCJtYXBwaW5ncyI6ImNBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDbEMsTUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQzNDLE1BQU0sRUFBRUUsY0FBYyxDQUFDLENBQUMsR0FBR0YsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQzVELE1BQU0sRUFBRUcsWUFBWSxDQUFDLENBQUMsR0FBR0gsT0FBTyxDQUFDLHlCQUF5QixDQUFDOztBQUUzRCxNQUFNSSxNQUFNLEdBQUdMLE9BQU8sQ0FBQ00sTUFBTSxDQUFDLENBQUM7O0FBRS9CO0FBQ0FELE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLE9BQU8sRUFBRUwsVUFBVSxDQUFDOztBQUUvQjtBQUNBRyxNQUFNLENBQUNFLEdBQUcsQ0FBQyxRQUFRLEVBQUVILFlBQVksQ0FBQyxPQUFPSSxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0VBQzFELE1BQU1QLGNBQWMsQ0FBQ0ssR0FBRyxFQUFFQyxHQUFHLEVBQUUsYUFBYSxDQUFDO0FBQy9DLENBQUMsQ0FBQyxDQUFDOztBQUVIO0FBQ0FKLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDLFdBQVcsRUFBRUgsWUFBWSxDQUFDLE9BQU9JLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEtBQUs7RUFDN0QsTUFBTVAsY0FBYyxDQUFDSyxHQUFHLEVBQUVDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQztBQUNsRCxDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBSixNQUFNLENBQUNFLEdBQUcsQ0FBQyxjQUFjLEVBQUVILFlBQVksQ0FBQyxPQUFPSSxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0VBQ2hFLE1BQU1QLGNBQWMsQ0FBQ0ssR0FBRyxFQUFFQyxHQUFHLEVBQUUsbUJBQW1CLENBQUM7QUFDckQsQ0FBQyxDQUFDLENBQUM7O0FBRUg7QUFDQUosTUFBTSxDQUFDRSxHQUFHLENBQUMsU0FBUyxFQUFFSCxZQUFZLENBQUMsT0FBT0ksR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksS0FBSztFQUMzRCxNQUFNUCxjQUFjLENBQUNLLEdBQUcsRUFBRUMsR0FBRyxFQUFFLGFBQWEsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBSixNQUFNLENBQUNFLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRUgsWUFBWSxDQUFDLE9BQU9JLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEtBQUs7RUFDbEUsTUFBTVAsY0FBYyxDQUFDSyxHQUFHLEVBQUVDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQztBQUN2RCxDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBSixNQUFNLENBQUNFLEdBQUcsQ0FBQyxXQUFXLEVBQUVILFlBQVksQ0FBQyxPQUFPSSxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO0VBQzdELE1BQU1QLGNBQWMsQ0FBQ0ssR0FBRyxFQUFFQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUM7QUFDbEQsQ0FBQyxDQUFDLENBQUM7O0FBRUhFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHUCxNQUFNIiwiaWdub3JlTGlzdCI6W119