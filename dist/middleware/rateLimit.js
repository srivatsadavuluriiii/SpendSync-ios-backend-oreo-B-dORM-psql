"use strict";var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");_Object$defineProperty(exports, "__esModule", { value: true });exports.RateLimiter = void 0;var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/date/now"));var _ioredis = _interopRequireDefault(require("ioredis"));
var _express = require("express");
var _errors = require("../utils/errors");









class RateLimiter {






  constructor(options = {}) {this.redis = void 0;this.windowMs = void 0;this.max = void 0;this.keyPrefix = void 0;this.handler = void 0;
    this.redis = new _ioredis.default(process.env.REDIS_URL || 'redis://localhost:6379');
    this.windowMs = options.windowMs || 60000; // 1 minute
    this.max = options.max || 100; // 100 requests per window
    this.keyPrefix = options.keyPrefix || 'rl:';
    this.handler = options.handler;

    // Handle Redis errors
    this.redis.on('error', (err) => {
      _errors.logger.error('Redis error:', err);
    });
  }

  middleware() {
    return async (req, res, next) => {
      try {
        const key = this.getKey(req);
        const current = await this.increment(key);

        // Set rate limit headers
        res.setHeader('X-RateLimit-Limit', this.max);
        res.setHeader('X-RateLimit-Remaining', Math.max(0, this.max - current));
        res.setHeader('X-RateLimit-Reset', await this.getResetTime(key));

        if (current > this.max) {
          if (this.handler) {
            return this.handler(req, res);
          }
          throw new _errors.RateLimitError('Too many requests');
        }

        next();
      } catch (err) {
        if (err instanceof _errors.RateLimitError) {
          next(err);
        } else {
          // If Redis is down, fail open
          _errors.logger.error('Rate limiter error:', err);
          next();
        }
      }
    };
  }

  getKey(req) {
    // Use IP address as default key
    const identifier = req.ip || req.headers['x-forwarded-for'] || req.socket.remoteAddress;
    return `${this.keyPrefix}${identifier}`;
  }

  async increment(key) {
    const multi = this.redis.multi();

    multi.incr(key);
    multi.pexpire(key, this.windowMs);

    const results = await multi.exec();
    return results ? results[0][1] : 0;
  }

  async getResetTime(key) {
    const ttl = await this.redis.pttl(key);
    return (0, _now.default)() + (ttl < 0 ? this.windowMs : ttl);
  }

  // Create different rate limiters for different routes
  static createLimiters() {
    return {
      // Default API limiter
      defaultLimiter: new RateLimiter({
        windowMs: 60000,
        max: 100,
        keyPrefix: 'rl:default:'
      }).middleware(),

      // Analytics endpoints limiter
      analyticsLimiter: new RateLimiter({
        windowMs: 60000,
        max: 50,
        keyPrefix: 'rl:analytics:'
      }).middleware(),

      // Batch operations limiter
      batchLimiter: new RateLimiter({
        windowMs: 300000, // 5 minutes
        max: 10,
        keyPrefix: 'rl:batch:'
      }).middleware(),

      // Query endpoints limiter
      queryLimiter: new RateLimiter({
        windowMs: 60000,
        max: 30,
        keyPrefix: 'rl:query:'
      }).middleware()
    };
  }
}exports.RateLimiter = RateLimiter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW9yZWRpcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2V4cHJlc3MiLCJfZXJyb3JzIiwiUmF0ZUxpbWl0ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJyZWRpcyIsIndpbmRvd01zIiwibWF4Iiwia2V5UHJlZml4IiwiaGFuZGxlciIsIlJlZGlzIiwicHJvY2VzcyIsImVudiIsIlJFRElTX1VSTCIsIm9uIiwiZXJyIiwibG9nZ2VyIiwiZXJyb3IiLCJtaWRkbGV3YXJlIiwicmVxIiwicmVzIiwibmV4dCIsImtleSIsImdldEtleSIsImN1cnJlbnQiLCJpbmNyZW1lbnQiLCJzZXRIZWFkZXIiLCJNYXRoIiwiZ2V0UmVzZXRUaW1lIiwiUmF0ZUxpbWl0RXJyb3IiLCJpZGVudGlmaWVyIiwiaXAiLCJoZWFkZXJzIiwic29ja2V0IiwicmVtb3RlQWRkcmVzcyIsIm11bHRpIiwiaW5jciIsInBleHBpcmUiLCJyZXN1bHRzIiwiZXhlYyIsInR0bCIsInB0dGwiLCJfbm93IiwiZGVmYXVsdCIsImNyZWF0ZUxpbWl0ZXJzIiwiZGVmYXVsdExpbWl0ZXIiLCJhbmFseXRpY3NMaW1pdGVyIiwiYmF0Y2hMaW1pdGVyIiwicXVlcnlMaW1pdGVyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3JhdGVMaW1pdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBSYXRlTGltaXRFcnJvciB9IGZyb20gJy4uL3V0aWxzL2Vycm9ycyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi91dGlscy9lcnJvcnMnO1xuXG5pbnRlcmZhY2UgUmF0ZUxpbWl0T3B0aW9ucyB7XG4gIHdpbmRvd01zPzogbnVtYmVyO1xuICBtYXg/OiBudW1iZXI7XG4gIGtleVByZWZpeD86IHN0cmluZztcbiAgaGFuZGxlcj86IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBSYXRlTGltaXRlciB7XG4gIHByaXZhdGUgcmVkaXM6IFJlZGlzO1xuICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvd01zOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgbWF4OiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkga2V5UHJlZml4OiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlcj86IChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogUmF0ZUxpbWl0T3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5yZWRpcyA9IG5ldyBSZWRpcyhwcm9jZXNzLmVudi5SRURJU19VUkwgfHwgJ3JlZGlzOi8vbG9jYWxob3N0OjYzNzknKTtcbiAgICB0aGlzLndpbmRvd01zID0gb3B0aW9ucy53aW5kb3dNcyB8fCA2MDAwMDsgLy8gMSBtaW51dGVcbiAgICB0aGlzLm1heCA9IG9wdGlvbnMubWF4IHx8IDEwMDsgLy8gMTAwIHJlcXVlc3RzIHBlciB3aW5kb3dcbiAgICB0aGlzLmtleVByZWZpeCA9IG9wdGlvbnMua2V5UHJlZml4IHx8ICdybDonO1xuICAgIHRoaXMuaGFuZGxlciA9IG9wdGlvbnMuaGFuZGxlcjtcblxuICAgIC8vIEhhbmRsZSBSZWRpcyBlcnJvcnNcbiAgICB0aGlzLnJlZGlzLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGxvZ2dlci5lcnJvcignUmVkaXMgZXJyb3I6JywgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1pZGRsZXdhcmUoKSB7XG4gICAgcmV0dXJuIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXkocmVxKTtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGF3YWl0IHRoaXMuaW5jcmVtZW50KGtleSk7XG5cbiAgICAgICAgLy8gU2V0IHJhdGUgbGltaXQgaGVhZGVyc1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdYLVJhdGVMaW1pdC1MaW1pdCcsIHRoaXMubWF4KTtcbiAgICAgICAgcmVzLnNldEhlYWRlcignWC1SYXRlTGltaXQtUmVtYWluaW5nJywgTWF0aC5tYXgoMCwgdGhpcy5tYXggLSBjdXJyZW50KSk7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ1gtUmF0ZUxpbWl0LVJlc2V0JywgYXdhaXQgdGhpcy5nZXRSZXNldFRpbWUoa2V5KSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgPiB0aGlzLm1heCkge1xuICAgICAgICAgIGlmICh0aGlzLmhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIocmVxLCByZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgUmF0ZUxpbWl0RXJyb3IoJ1RvbyBtYW55IHJlcXVlc3RzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJhdGVMaW1pdEVycm9yKSB7XG4gICAgICAgICAgbmV4dChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIFJlZGlzIGlzIGRvd24sIGZhaWwgb3BlblxuICAgICAgICAgIGxvZ2dlci5lcnJvcignUmF0ZSBsaW1pdGVyIGVycm9yOicsIGVycik7XG4gICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0S2V5KHJlcTogUmVxdWVzdCk6IHN0cmluZyB7XG4gICAgLy8gVXNlIElQIGFkZHJlc3MgYXMgZGVmYXVsdCBrZXlcbiAgICBjb25zdCBpZGVudGlmaWVyID0gcmVxLmlwIHx8IHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXSB8fCByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3M7XG4gICAgcmV0dXJuIGAke3RoaXMua2V5UHJlZml4fSR7aWRlbnRpZmllcn1gO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBpbmNyZW1lbnQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IG11bHRpID0gdGhpcy5yZWRpcy5tdWx0aSgpO1xuICAgIFxuICAgIG11bHRpLmluY3Ioa2V5KTtcbiAgICBtdWx0aS5wZXhwaXJlKGtleSwgdGhpcy53aW5kb3dNcyk7XG4gICAgXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IG11bHRpLmV4ZWMoKTtcbiAgICByZXR1cm4gcmVzdWx0cyA/IChyZXN1bHRzWzBdWzFdIGFzIG51bWJlcikgOiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRSZXNldFRpbWUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGNvbnN0IHR0bCA9IGF3YWl0IHRoaXMucmVkaXMucHR0bChrZXkpO1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgKHR0bCA8IDAgPyB0aGlzLndpbmRvd01zIDogdHRsKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBkaWZmZXJlbnQgcmF0ZSBsaW1pdGVycyBmb3IgZGlmZmVyZW50IHJvdXRlc1xuICBzdGF0aWMgY3JlYXRlTGltaXRlcnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIERlZmF1bHQgQVBJIGxpbWl0ZXJcbiAgICAgIGRlZmF1bHRMaW1pdGVyOiBuZXcgUmF0ZUxpbWl0ZXIoe1xuICAgICAgICB3aW5kb3dNczogNjAwMDAsXG4gICAgICAgIG1heDogMTAwLFxuICAgICAgICBrZXlQcmVmaXg6ICdybDpkZWZhdWx0OidcbiAgICAgIH0pLm1pZGRsZXdhcmUoKSxcblxuICAgICAgLy8gQW5hbHl0aWNzIGVuZHBvaW50cyBsaW1pdGVyXG4gICAgICBhbmFseXRpY3NMaW1pdGVyOiBuZXcgUmF0ZUxpbWl0ZXIoe1xuICAgICAgICB3aW5kb3dNczogNjAwMDAsXG4gICAgICAgIG1heDogNTAsXG4gICAgICAgIGtleVByZWZpeDogJ3JsOmFuYWx5dGljczonXG4gICAgICB9KS5taWRkbGV3YXJlKCksXG5cbiAgICAgIC8vIEJhdGNoIG9wZXJhdGlvbnMgbGltaXRlclxuICAgICAgYmF0Y2hMaW1pdGVyOiBuZXcgUmF0ZUxpbWl0ZXIoe1xuICAgICAgICB3aW5kb3dNczogMzAwMDAwLCAvLyA1IG1pbnV0ZXNcbiAgICAgICAgbWF4OiAxMCxcbiAgICAgICAga2V5UHJlZml4OiAncmw6YmF0Y2g6J1xuICAgICAgfSkubWlkZGxld2FyZSgpLFxuXG4gICAgICAvLyBRdWVyeSBlbmRwb2ludHMgbGltaXRlclxuICAgICAgcXVlcnlMaW1pdGVyOiBuZXcgUmF0ZUxpbWl0ZXIoe1xuICAgICAgICB3aW5kb3dNczogNjAwMDAsXG4gICAgICAgIG1heDogMzAsXG4gICAgICAgIGtleVByZWZpeDogJ3JsOnF1ZXJ5OidcbiAgICAgIH0pLm1pZGRsZXdhcmUoKVxuICAgIH07XG4gIH1cbn0gIl0sIm1hcHBpbmdzIjoid1lBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBRixPQUFBOzs7Ozs7Ozs7O0FBVU8sTUFBTUcsV0FBVyxDQUFDOzs7Ozs7O0VBT3ZCQyxXQUFXQSxDQUFDQyxPQUF5QixHQUFHLENBQUMsQ0FBQyxFQUFFLE1BTnBDQyxLQUFLLGVBQ0lDLFFBQVEsZUFDUkMsR0FBRyxlQUNIQyxTQUFTLGVBQ1RDLE9BQU87SUFHdEIsSUFBSSxDQUFDSixLQUFLLEdBQUcsSUFBSUssZ0JBQUssQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFNBQVMsSUFBSSx3QkFBd0IsQ0FBQztJQUN6RSxJQUFJLENBQUNQLFFBQVEsR0FBR0YsT0FBTyxDQUFDRSxRQUFRLElBQUksS0FBSyxDQUFD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