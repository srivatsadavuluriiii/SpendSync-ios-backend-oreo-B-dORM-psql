"use strict";var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");_Object$defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));var _values = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/values"));var _express = _interopRequireDefault(require("express"));
var _cors = _interopRequireDefault(require("cors"));
var _helmet = _interopRequireDefault(require("helmet"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _swaggerUiExpress = _interopRequireDefault(require("swagger-ui-express"));
var _yamljs = _interopRequireDefault(require("yamljs"));
var _path = _interopRequireDefault(require("path"));


var _rateLimit = require("./middleware/rateLimit");
var _errors = require("./utils/errors");
var _metrics = require("./utils/metrics");
var _cache = require("./utils/cache");


var _analytics = _interopRequireDefault(require("./services/analytics")); // Import middleware
// Import routes
// Load OpenAPI specification
const swaggerDocument = _yamljs.default.load(_path.default.join(__dirname, 'docs/openapi.yaml'));

// Initialize Express app
const app = (0, _express.default)();
const PORT = process.env.PORT || 3005;

// Initialize rate limiters
const rateLimiters = _rateLimit.RateLimiter.createLimiters();

// Initialize caches
const caches = _cache.Cache.createCaches();

// Basic security middleware
app.use((0, _helmet.default)());
app.use((0, _cors.default)());

// Metrics middleware
app.use(_metrics.metricsMiddleware);

// Apply rate limiting
app.use('/analytics/track', rateLimiters.analyticsLimiter);
app.use('/analytics/batch', rateLimiters.batchLimiter);
app.use('/analytics/query', rateLimiters.queryLimiter);
app.use(rateLimiters.defaultLimiter); // Default rate limit for other routes

// API Documentation
app.use('/docs', _swaggerUiExpress.default.serve, _swaggerUiExpress.default.setup(swaggerDocument));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'UP',
    service: 'analytics-service',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version
  });
});

// Metrics endpoint
app.get('/metrics', _metrics.metricsHandler);

// Analytics routes
app.use('/analytics', _analytics.default);

// Error handling
app.use(_errors.errorHandler);

// Connect to MongoDB with retry logic
const connectWithRetry = async (retries = 5, interval = 5000) => {
  for (let i = 0; i < retries; i++) {
    try {
      await _mongoose.default.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/spendsync_analytics', {
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000
      });
      console.log('Connected to MongoDB');
      break;
    } catch (err) {
      console.error(`MongoDB connection attempt ${i + 1} failed:`, err);
      if (i === retries - 1) {
        console.error('Max retries reached. Exiting...');
        process.exit(1);
      }
      await new _promise.default((resolve) => (0, _setTimeout2.default)(resolve, interval));
    }
  }
};

// Graceful shutdown
const gracefulShutdown = async () => {
  console.log('Received shutdown signal');

  // Close MongoDB connection
  try {
    await _mongoose.default.connection.close();
    console.log('MongoDB connection closed');
  } catch (err) {
    console.error('Error closing MongoDB connection:', err);
  }

  // Close Redis connections
  try {var _context, _context2;
    const redisClients = [
    ...(0, _map.default)(_context = (0, _values.default)(caches)).call(_context, (cache) => cache.redis),
    ...(0, _map.default)(_context2 = (0, _values.default)(rateLimiters)).call(_context2, (limiter) => limiter.redis)];

    await _promise.default.all((0, _map.default)(redisClients).call(redisClients, (client) => client.quit()));
    console.log('Redis connections closed');
  } catch (err) {
    console.error('Error closing Redis connections:', err);
  }

  // Exit process
  process.exit(0);
};

// Handle shutdown signals
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Start server
if (process.env.NODE_ENV !== 'test') {
  connectWithRetry().then(() => {
    app.listen(PORT, () => {
      console.log(`Analytics Service running on port ${PORT}`);
      console.log(`Documentation available at http://localhost:${PORT}/docs`);
      console.log(`Health check available at http://localhost:${PORT}/health`);
      console.log(`Metrics available at http://localhost:${PORT}/metrics`);
    });
  });
}var _default = exports.default =

app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,